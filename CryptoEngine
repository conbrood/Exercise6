//The purpose of this block is designed to decipher text, so that files may be coded or decoded with specific keys that allow you access to the specified content.
//The code presented here is very precise and clean.The only thing I might recommend for example, would be like on line 40, be careful in recognition on bracket placement, adding a couple spaces of pressing enter before adding a bracket at the end of a statement will only help improve your clarity even more.


import java.util.*; //by importing this i can access all classes and methods
import java.nio.file.Files; //allows me to use static methods in comibnations with importing paths directly below
import java.nio.file.Paths;//allows me to use static methods for path objects
import javax.crypto.*; //javax is a extentsion that allows for the use classes and interfaces for cryptographic operations
import java.io.FileNotFoundException; //this package find that if a file is called for but doesnt exist a file not found exception will be thrown.
import java.io.IOException//this package throws a ioexception if there is a problem compiling/running
import java.security.InvalidKeyException; //this package tells me if there is something wrong with the excryption key
import java.security.NoSuchAlgorithmException; //this package exception is thrown when the algorithm request doesnt exist 

public class CryptoEngine {
	
        KeyGenerator keyGen; //this is supposed to created a key or a code
	String encFile, decFile; //these will encode or decode a text file
	SecretKey secKey; //this function creates uses the encrypt or decrypt function to crete a secret key
	Cipher aesCipher; //this is an ecyrpition algorithm 
	
	CryptoEngine(String inFile, String outFile) throws NoSuchAlgorithmException, NoSuchPaddingException {
	   encFile = inFile;
	   decFile = outFile;
	  
	   keyGen = KeyGenerator.getInstance("AES");
           keyGen.init(128);
           secKey = keyGen.generateKey();
           aesCipher = Cipher.getInstance("AES");
	}
	
	public void encrypt() throws InvalidKeyException, IOException {
           byte[] byteText = "Include your plaintext to be encrypted here".getBytes();
        
           aesCipher.init(Cipher.ENCRYPT_MODE, secKey);
	
           byte[] byteCipherText = null;
	   
           try {
	       byteCipherText = aesCipher.doFinal(byteText);
     	   } catch (IllegalBlockSizeException | BadPaddingException e) {
	       e.printStackTrace();
           }
	   Files.write(Paths.get(encFile), byteCipherText);
	}
	
 
	public void decrypt() throws IOException, InvalidKeyException {
          
          byte[] cipherText = Files.readAllBytes(Paths.get(encFile));

          aesCipher.init(Cipher.DECRYPT_MODE, secKey);
          
          byte[] bytePlainText = null;
          try { bytePlainText = aesCipher.doFinal(cipherText);

                          } 
        catch (IllegalBlockSizeException | BadPaddingException e) {
                          e.printStackTrace();
          
          Files.write(Paths.get(decFile), bytePlainText)
          
          
}
  }
